configfile: 'config.yml'

GENOMES, = glob_wildcards("fna/{genome}.fasta")

#localrules: all,  make_path, calc_complexity

def aggregate_input(wildcards):
	checkpoint_output = checkpoints.makeCoreOGfastas.get(**wildcards).output[0]
	return expand("Results/paml/{og}/out.mlc",
		og=glob_wildcards(os.path.join("Results/ortho/coreogs_nuc/", "{og}.fasta")).og )

rule all:
	input: "qu"
	#input: "Results/ortho/Orthogroups.txt", aggregate_input

rule aggregate:
    input:
        aggregate_input
    output:
        "qu"
    shell:
        "touch {output}"

rule paml:
	input: "Results/ortho/coreogs_aligned_nuc/{og}.fasta.treefile"
	output: "Results/paml/{og}/out.mlc"
	shell:
		"""
		mkdir -p paml/{wildcards.og}
		cp codeml.ctl paml/{wildcards.og}
		sed -i 	's/OG/{wildcards.og}/g' paml/{wildcards.og}/codeml.ctl
		cd paml/{wildcards.og}
		codeml
		"""

rule tree_for_core:
	input:
		"Results/ortho/coreogs_aligned_nuc/{og}.fasta"	
	output:
		"Results/ortho/coreogs_aligned_nuc/{og}.fasta.treefile"
	shell:
		"{config[iqtree.bin]} -s {input}"

rule pal2nal:
	input:
		prot="Results/ortho/coreogs_aligned_prot/{og}.fasta",
		nuc="Results/ortho/coreogs_nuc/{og}.fasta"
	output:
		"Results/ortho/coreogs_aligned_nuc/{og}.fasta"
	shell:
		"perl helpers/pal2nal.pl {input.prot} {input.nuc} -output fasta > {output}"
	

rule align_core_prot:
	input:
		"Results/ortho/coreogs_prot/{og}.fasta"
	output:
		"Results/ortho/coreogs_aligned_prot/{og}.fasta"
	shell:
		"scripts/./muscle -in {input} -out {output} -quiet"
	
checkpoint makeCoreOGfastas: 
	input:
		og="Results/ortho/Orthogroups.txt",
		coreOg="Results/ortho/SingleCopyOrthogroups.txt",
		ffns=expand("ffn/{qu}.fasta", qu=GENOMES)
	output:
		coreog=directory("Results/ortho/coreogs/")
	shell:
		"""
		mkdir -p tmp
		cat ffn/*.fasta > tmp/all_genes_nuc.fasta
		cat faa/*.fasta > tmp/all_genes_prot.fasta
		mkdir -p Results/ortho/coreogs_nuc Results/ortho/coreogs_prot
		perl scripts/splitToOg.pl Results/ortho/Orthogroups.txt tmp/all_genes_nuc.fasta Results/ortho/coreogs_nuc Results/ortho/SingleCopyOrthogroups.txt
		perl scripts/splitToOg.pl Results/ortho/Orthogroups.txt tmp/all_genes_prot.fasta Results/ortho/coreogs_prot Results/ortho/SingleCopyOrthogroups.txt
		"""		

rule orthofinder:
	input: 
		expand("faa/{qu}.fasta", qu=GENOMES)
	output:
		"Results/ortho/Orthogroups.txt",
		"Results/ortho/SingleCopyOrthogroups.txt"
	threads: 4
	conda: "envs/ortho.yaml"
	log: "log_of.txt"
	shell:
		"bash scripts/run_orthofinder.sh {threads} > {log}"
rule prokka:
	input:
		ancient("fna/{qu}.fasta")
	output:
		directory("prokka/{qu}")
	threads: 4
	conda: "envs/prokka.yaml"
	shell:
		"""
		name=$(basename {input} .fasta);
		prokka --cpus {threads} --outdir {output} --force --prefix $name --locustag $name {input}
		"""
rule make_ffn:
	input:
		ancient("prokka/{qu}")
	output:
		"ffn/{qu}.fasta"
	conda: "envs/scripts.yaml"
	shell:
		"""
		name=$(basename {input})
		python3 scripts/GBffn.py -gb  {input}/$name.gbk > {output}
		"""
rule make_faa:
	input:
		ancient("prokka/{qu}")
	output:
		"faa/{qu}.fasta"
	conda: "envs/scripts.yaml"
	shell:
		"""
		name=$(basename {input})
		python3 scripts/GBfaa.py -gb  {input}/$name.gbk > {output}
		"""
